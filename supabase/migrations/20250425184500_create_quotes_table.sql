-- Drop the table if it exists with potentially incorrect schema
DROP TABLE IF EXISTS public.quotes;

-- Recreate the table with the correct schema
CREATE TABLE quotes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    staff_id UUID REFERENCES auth.users(id), -- Assuming staff are authenticated users
    name TEXT NOT NULL, -- Changed from client_name based on user feedback
    email TEXT NOT NULL, -- Changed from client_email
    service_type TEXT NOT NULL,
    price DECIMAL(10, 2) NOT NULL CHECK (price > 0),
    status TEXT NOT NULL DEFAULT 'Pending', -- ("Pending", "Paid", "Expired")
    created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
    expires_at TIMESTAMPTZ,
    CONSTRAINT valid_status CHECK (status IN ('Pending', 'Paid', 'Expired'))
);
-- Optional: Add indexes for faster lookups
CREATE INDEX idx_quotes_status ON quotes(status);
CREATE INDEX idx_quotes_email ON quotes(email); -- Changed index name
CREATE INDEX idx_quotes_staff_id ON quotes(staff_id);

-- Enable Row Level Security (RLS)
ALTER TABLE quotes ENABLE ROW LEVEL SECURITY;

-- Policies: Define who can do what. Adjust according to your auth rules.

-- Allow staff to insert quotes for themselves
CREATE POLICY "Allow staff to insert their own quotes"
ON quotes
FOR INSERT
WITH CHECK (auth.uid() = staff_id);

-- Allow staff to view quotes they created
CREATE POLICY "Allow staff to view their own quotes"
ON quotes
FOR SELECT
USING (auth.uid() = staff_id);

-- Allow staff to update quotes they created (e.g., change status manually if needed)
CREATE POLICY "Allow staff to update their own quotes"
ON quotes
FOR UPDATE
USING (auth.uid() = staff_id)
WITH CHECK (auth.uid() = staff_id);

-- Allow staff to delete quotes they created
CREATE POLICY "Allow staff to delete their own quotes"
ON quotes
FOR DELETE
USING (auth.uid() = staff_id);

-- Allow public read access for a specific quote ID IF the status is Pending (for payment page)
CREATE POLICY "Allow public read access for pending quotes by ID"
ON quotes
FOR SELECT
USING (status = 'Pending'); -- Anyone can SELECT if status is Pending (will be filtered by ID in the query)


COMMENT ON TABLE quotes IS 'Stores quotes generated by staff for clients.';
COMMENT ON COLUMN quotes.id IS 'Unique identifier for the quote.';
COMMENT ON COLUMN quotes.staff_id IS 'ID of the staff member who created the quote.';
COMMENT ON COLUMN quotes.name IS 'Full name of the client.'; -- Changed comment target
COMMENT ON COLUMN quotes.email IS 'Email address of the client.'; -- Changed comment target
COMMENT ON COLUMN quotes.service_type IS 'Type of service being quoted (e.g., Certified Translation).';
COMMENT ON COLUMN quotes.price IS 'Price of the service in USD.';
COMMENT ON COLUMN quotes.status IS 'Current status of the quote (Pending, Paid, Expired).';
COMMENT ON COLUMN quotes.created_at IS 'Timestamp when the quote was created.';
COMMENT ON COLUMN quotes.expires_at IS 'Optional timestamp when the quote expires.';
